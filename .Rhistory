runmin(segLengths,k=2)
runmax(segLengths,k=2))
runmax(segLengths,k=2)
runmin(values, window){
runmin(values, window){
runmin <- function(values, window){
runmin <- function(values, window){
mins <- c()
for(i in 1:(length(values)){
mins <- c(mins, min(values[i], values[i+window-1]))
}
return(mins)
}
runmin <- function(values, window){
mins <- c()
for(i in 1:(length(values)){
mins <- c(mins, min(values[i], values[i+window-1]))
}
return(mins)
}
runmin <- function(values, window){
mins <- c()
for(i in 1:(length(values))){
mins <- c(mins, min(values[i], values[i+window-1]))
}
return(mins)
}
runmin(segLengths,k=2)
runmin(segLengths,window=2)
runmin <- function(values, window){
mins <- c()
for(i in 1:(length(values))){
mins <- c(mins, min(values[i:(i+window-1)]))
}
return(mins)
}
runmin(segLengths,window=2)
segLengths
runmin <- function(values, window){
mins <- c()
for(i in 1:(length(values)-window+1)){
mins <- c(mins, min(values[i:(i+window-1)]))
}
return(mins)
}
runmin(segLengths,window=2)
runmin(segLengths,window=3)
runmin <- function(values, window){
mins <- c()
for(i in 1:(length(values)-window+1)){
mins <- c(mins, min(values[i:(i+window-1)]))
}
return(mins)
}
runmax <- function(values, window){
maxes <- c()
for(i in 1:(length(values)-window+1)){
maxes <- c(maxes, max(values[i:(i+window-1)]))
}
return(maxes)
}
segLengths
runmin(segLengths,window=1)
runmin(segLengths,window=2)
runmin(segLengths,window=3)
runmax(segLengths,window=1)
runmax(segLengths,window=2)
runmax(segLengths,window=3)
runmin <- function(values, window){
mins <- rep(NA, length(values)-window+1)
for(i in 1:(length(values)-window+1)){
mins[i] <- c(mins, min(values[i:(i+window-1)]))
}
return(mins)
}
runmax <- function(values, window){
maxes <- rep(NA, length(values)-window+1)
for(i in 1:(length(values)-window+1)){
maxes[i] <- c(maxes, max(values[i:(i+window-1)]))
}
return(maxes)
}
segLengths
runmin(segLengths,window=1)
runmin <- function(values, window){
mins <- rep(NA, length(values)-window+1)
for(i in 1:(length(values)-window+1)){
mins[i] <- min(values[i:(i+window-1)])
}
return(mins)
}
runmax <- function(values, window){
maxes <- rep(NA, length(values)-window+1)
for(i in 1:(length(values)-window+1)){
maxes[i] <- max(values[i:(i+window-1)])
}
return(maxes)
}
segLengths
runmin(segLengths,window=1)
runmin(segLengths,window=2)
runmin(segLengths,window=3)
runmax(segLengths,window=1)
runmax(segLengths,window=2)
runmax(segLengths,window=3)
library(changepointSelect)
?trimTrendsAndSeasonality
?getOptimalChangepoints
library(changepointSelect)
sessionInfo()
?changepointSelect
author(changepointSelect)
packageDescription(changepointSelect)
library(changepointSelect)
packageDescription(changepointSelect)
packageDescription(changepointSelect)
packageDescription("changepointSelect")
citation("changepointSelect")
library(changepointSelect)
library(changepointSelect)
citation("changepointSelect")
library(changepointSelect)
library(changepointSelect)
install.packages("locStra")
library(locstra)
library(locStra)
install.packages(c("backports", "batchtools", "broom", "callr", "dbplyr", "foreach", "forecast", "fs", "glue", "gtools", "Hmisc", "isoband", "locfit", "matrixStats", "purrr", "quantmod", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "tibble", "tinytex", "withr", "xfun", "xml2"))
install.packages("RCurl")
library(changepointSelect)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
genSimulatedData <- function(segLengths=200, seed=1){
set.seed(seed)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[-ceiling(segLengths/2)] <- 200
}
genSimulatedData <- function(segLengths=200, seed=1){
set.seed(seed)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[-ceiling(segLengths/2)] <- 200
return(series)
}
series <- genSimulatedData()
plot(y=series, x=1:length(series))
series
segLengths=200
#Simulation of a time series with changepoints, trends, and seasonality
set.seed(1)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series
series[50:60] <- rnorm(11, mean=200, sd=5)
series[-ceiling(segLengths/2)] <- 200
series
ceiling(segLengths/2)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[3*segLengths - ceiling(segLengths/2)] <- 200
series
series[700]
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[4*segLengths - ceiling(segLengths/2)] <- 200
series
#Simulation of a time series with changepoints, trends, and seasonality
genSimulatedData <- function(segLengths=200, seed=1){
set.seed(seed)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[4*segLengths - ceiling(segLengths/2)] <- 200
return(series)
}
series <- genSimulatedData()
plot(y=series,x=1:length(series))
plot(y=series,x=1:length(series), type="l")
#Simulation of a time series with changepoints, trends, and seasonality
genSimulatedData <- function(segLengths=200, seed=1){
set.seed(seed)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[4*segLengths - ceiling(segLengths/2)] <- 200
return(series)
}
series <- genSimulatedData()
#Have series of observations in a vector
simDat <- genSimulatedData()
#Obtain changepoints
changepoints <- getOptimalChangepoints(series=simDat, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
library(changepointSelect)
#Have series of observations in a vector
simDat <- genSimulatedData()
#Obtain changepoints
changepoints <- getOptimalChangepoints(series=simDat, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
#Trim changepoints for linear trends and seasonality
changepoints <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
changepoints
#Trim changepoints for linear trends and seasonality
changepoints <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
changepoints
#Trim changepoints for linear trends and seasonality
changepoints <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.25, thresholdSeasonal=1.25)
changepoints
simDat
library(changepointSelect)
#Have series of observations in a vector
simDat <- genSimulatedData()
#Obtain changepoints. 10000 simulation trials may take some time.
changepoints <- getOptimalChangepoints(series=simDat, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
changepoints
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
changepointsTrimmed
source("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Simulation.R")
series
series[700]
simDat[700]
series-simDat
#Simulation of a time series with changepoints, trends, and seasonality
genSimulatedData <- function(segLengths=200, seed=1){
set.seed(seed)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(100, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[4*segLengths - ceiling(segLengths/2)] <- 200
return(series)
}
#Have series of observations in a vector
simDat <- genSimulatedData()
simDat
simDat-series
#Obtain changepoints. 10000 simulation trials may take some time.
changepoints <- getOptimalChangepoints(series=simDat, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
changepoints
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
changepointsTrimmed
#Simulation of a time series with changepoints, trends, and seasonality
genSimulatedData <- function(segLengths=200, seed=1){
set.seed(seed)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[4*segLengths - ceiling(segLengths/2)] <- 200
return(series)
}
#Have series of observations in a vector
simDat <- genSimulatedData()
summary(simDat-series)
simDat-series
#Obtain changepoints. 10000 simulation trials may take some time.
changepoints <- getOptimalChangepoints(series=simDat, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
changepointsTrimmed
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylabel="Simulated Value", xlabel="Index")
warnings()
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
abline(v=changepointsTrimmed, col="red")
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Plot
plot(y=series, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
abline(v=changepointsTrimmed, col="red")
#Plot
plot(y=series, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
changepointsTrimmed
abline(v=changepointsTrimmed, col="red")
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.25, thresholdSeasonal=1.25)
changepointsTrimmed
#Have series of observations in a vector
simDat <- genSimulatedData(seed=2)
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Have series of observations in a vector
simDat <- genSimulatedData(seed=3)
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Have series of observations in a vector
simDat <- genSimulatedData(seed=1)
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Have series of observations in a vector
simDat <- genSimulatedData(seed=5)
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Have series of observations in a vector
simDat <- genSimulatedData(seed=6)
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Have series of observations in a vector
simDat <- genSimulatedData(seed=7)
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Obtain changepoints. 10000 simulation trials may take some time.
changepoints <- getOptimalChangepoints(series=simDat, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
changepoints
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
changepointsTrimmed
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
abline(v=changepointsTrimmed, col="red")
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.25, thresholdSeasonal=1.25)
changepointsTrimmed
#Have series of observations in a vector
simDat <- genSimulatedData(seed=8)
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Obtain changepoints. 10000 simulation trials may take some time.
changepoints <- getOptimalChangepoints(series=simDat, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.25, thresholdSeasonal=1.25)
changepointsTrimmed
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
changepointsTrimmed
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
abline(v=changepointsTrimmed, col="red")
#Have series of observations in a vector
simDat <- genSimulatedData(segLengths=400, seed=8)
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
#Obtain changepoints. 10000 simulation trials may take some time.
changepoints <- getOptimalChangepoints(series=simDat, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
changepointsTrimmed
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.3)
changepointsTrimmed
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simDat, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.25)
changepointsTrimmed
#Simulation of a time series with changepoints, trends, and seasonality
genSimulatedData <- function(segLengths=200, seed=8){
set.seed(seed)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[4*segLengths - ceiling(segLengths/2)] <- 200
return(series)
}
series <- genSimulatedData()
series
series[700]
#Simulation of a time series with changepoints, trends, and seasonality
genSimulatedData <- function(segLengths=200, seed=8){
set.seed(seed)
ind <- seq(1,segLengths)
#Generate four main segments, each consisting of 200 observations
part1 <- rnorm(segLengths, mean=50, sd = 10)
part2 <- 50 + 0.5*ind + rnorm(200, mean=0, sd=10)
part3 <- 150 + 15*sin(2*pi*0.02*ind) + 10*sin(4*pi*0.02*ind) + 15*cos(2*pi*0.02*ind) + 10*cos(4*pi*0.02*ind) + rnorm(segLengths, mean=0, sd=10)
part4 <- rnorm(segLengths, mean=50, sd=20)
#Join them, insert some additional changepoints
series <- c(part1, part2, part3, part4)
series[50:60] <- rnorm(11, mean=200, sd=5)
series[4*segLengths - ceiling(segLengths/2)] <- 200
return(series)
}
series <- genSimulatedData()
simDat <- genSimulatedData()
save(simSeries, file="C:\\Matt Work\\Harvard\\Mobile Health Project\\R Package\\changepointSelect\\data\\simSeries.RData")
simSeries <- genSimulatedData()
save(simSeries, file="C:\\Matt Work\\Harvard\\Mobile Health Project\\R Package\\changepointSelect\\data\\simSeries.RData")
#Obtain changepoints for the simulated data. 10000 simulation trials may take some time.
changepoints <- getOptimalChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
#Trim changepoints for linear trends and seasonality
changepointsTrimmed <- trimTrendsAndSeasonality(series=simSeries, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
#Plot
plot(y=simDat, x=1:length(simDat), type="l", ylab="Simulated Value", xlab="Index")
abline(v=changepointsTrimmed, col="red")
changepointsTrimmed
library(changepointSelect)
simSeries
#Obtain changepoints for the simulated data. 10000 simulation trials may take some time.
simChangepoints <- getOptimalChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
#Trim changepoints for linear trends and seasonality
simChangepointsTrimmed <- trimTrendsAndSeasonality(series=simSeries, changepoints=changepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
#Plot
plot(y=simSeries, x=1:length(simSeries), type="l", ylab="Simulated Value", xlab="Index")
abline(v=changepointsTrimmed, col="red")
#Obtain changepoints for the simulated data. 10000 simulation trials may take some time.
simChangepoints <- getOptimalChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
#Trim changepoints for linear trends and seasonality
simChangepointsTrimmed <- trimTrendsAndSeasonality(series=simSeries, changepoints=simChangepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
#Plot
plot(y=simSeries, x=1:length(simSeries), type="l", ylab="Simulated Value", xlab="Index")
abline(v=simChangepointsTrimmed, col="red")
#Plot
plot(y=simSeries, x=1:length(simSeries), type="l", ylab="Simulated Value", xlab="Index", main="Simulated Data with Trimmed Changepoints")
abline(v=simChangepointsTrimmed, col="red")
library(changepointSelect)
#Obtain changepoints for the simulated data. 10000 simulation trials may take some time.
simChangepoints <- getOptimalChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
#Trim changepoints for linear trends and seasonality
simChangepointsTrimmed <- trimTrendsAndSeasonality(series=simSeries, changepoints=simChangepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
#Trim changepoints for linear trends and seasonality
simChangepointsTrimmed <- trimLinearTrendsAndSeasonality(series=simSeries, changepoints=simChangepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
#Plot
plot(y=simSeries, x=1:length(simSeries), type="l", ylab="Simulated Value", xlab="Index", main="Simulated Data with Trimmed Changepoints")
abline(v=simChangepointsTrimmed, col="red")
#Trim changepoints for linear trends and seasonality
simChangepointsTrimmed <- trimLinearTrends(series=simSeries, changepoints=simChangepoints, thresholdLinear=1.2)
#Trim changepoints for linear trends and seasonality
simChangepointsTrimmed <- trimLinearTrends(series=simSeries, changepoints=simChangepoints, threshold=1.2)
#Plot
plot(y=simSeries, x=1:length(simSeries), type="l", ylab="Simulated Value", xlab="Index", main="Simulated Data with Trimmed Changepoints")
abline(v=simChangepointsTrimmed, col="red")
#Trim changepoints for seasonality
simChangepointsTrimmed <- trimSeasonality(series=simSeries, changepoints=simChangepoints, threshold=1.2)
#Plot
plot(y=simSeries, x=1:length(simSeries), type="l", ylab="Simulated Value", xlab="Index", main="Simulated Data with Trimmed Changepoints")
abline(v=simChangepointsTrimmed, col="red")
library(changepointSelect)
library(changepointSelect)
library(changepointSelect)
library(changepointSelect)
require(annotate)
require(ggplot2)
require("tidyverse")
require(tidyverse)
library(devtools)
!require("devtools")
if(!require("devtools")){
install.packages("devtools")
}
library("devtools")
#Load in the merged data set and function for getting time series
source("../Load Data.r")
library(changepointSelect)
library(changepointSelect)
T & T
T & F
library(changepointSelect)
