pertinentSeries <- rep(NA, length(series))
shiftedChangepoints1 <- shiftedChangepoints2 <- c(0)
for(k in 1:length(newChangepointIndices)){
changeIndex <- newChangepointIndices[k]
#Record segment left of changepoint, record shifted changepoint
pertinentSeries[(changepoints2[changeIndex-1]+1):changepoints2[changeIndex]] <- series[(changepoints2[changeIndex-1]+1):changepoints2[changeIndex]]
shiftedNewChangepoint <- sum(!is.na(pertinentSeries))
shiftedChangepoints2 <- c(shiftedChangepoints2, shiftedNewChangepoint)
#Record segment right of changepoint, record shifted changepoint
pertinentSeries[(changepoints2[changeIndex]+1):changepoints2[changeIndex+1]] <- series[(changepoints2[changeIndex]+1):changepoints2[changeIndex+1]]
shiftedNewChangepoint <- sum(!is.na(pertinentSeries))
shiftedChangepoints2 <- c(shiftedChangepoints2, shiftedNewChangepoint)
if(changepoints2[changeIndex+1] %in% changepoints1){
shiftedChangepoints1 <- c(shiftedChangepoints1, shiftedNewChangepoint)
}
}
#Redefine the original series as its pertinent segments and
#redefine the changepoints accordingly
series <- pertinentSeries[which(!is.na(pertinentSeries))]
changepoints1 <- sort(unique(c(0, shiftedChangepoints1, length(series))))
changepoints2 <- sort(unique(c(0, shiftedChangepoints2, length(series))))
}
series <- simSeries
changepoints1 <- c(305, 600)
changepoints2 <- c(305, 400, 600)
getLogLik(series, changepoints = changepoints2) - getLogLik(series, changepoints = changepoints1)
#Check if the previous changepoints are strictly a subset of the new changepoints
previousAreSubset <- all(changepoints1 %in% changepoints2)
#Include first and last observations as changepoints.
changepoints1 <- unique(c(0, changepoints1, length(series)))
changepoints2 <- unique(c(0, changepoints2, length(series)))
#If previous changepoints are a subset of the new ones, only simulate segments
#neighboring the new changepoints for getting the p-value (saves on computation).
#Else, simulate all segments.
if(previousAreSubset){
#Grab the segments to the left and right of each new changepoint.
newChangepointIndices <- which(!(changepoints2 %in% changepoints1))
#Subset the series only to the pertinent segments
#Some computation is purposefully allowed to be redundant. Redundancies could be avoided by
#checking which segments neighbor one another in the original series, but this would also complicate
#the code substantially.
pertinentSeries <- rep(NA, length(series))
shiftedChangepoints1 <- shiftedChangepoints2 <- c(0)
for(k in 1:length(newChangepointIndices)){
changeIndex <- newChangepointIndices[k]
#Record segment left of changepoint, record shifted changepoint
pertinentSeries[(changepoints2[changeIndex-1]+1):changepoints2[changeIndex]] <- series[(changepoints2[changeIndex-1]+1):changepoints2[changeIndex]]
shiftedNewChangepoint <- sum(!is.na(pertinentSeries))
shiftedChangepoints2 <- c(shiftedChangepoints2, shiftedNewChangepoint)
#Record segment right of changepoint, record shifted changepoint
pertinentSeries[(changepoints2[changeIndex]+1):changepoints2[changeIndex+1]] <- series[(changepoints2[changeIndex]+1):changepoints2[changeIndex+1]]
shiftedNewChangepoint <- sum(!is.na(pertinentSeries))
shiftedChangepoints2 <- c(shiftedChangepoints2, shiftedNewChangepoint)
if(changepoints2[changeIndex+1] %in% changepoints1){
shiftedChangepoints1 <- c(shiftedChangepoints1, shiftedNewChangepoint)
}
}
#Redefine the original series as its pertinent segments and
#redefine the changepoints accordingly
series <- pertinentSeries[which(!is.na(pertinentSeries))]
changepoints1 <- sort(unique(c(0, shiftedChangepoints1, length(series))))
changepoints2 <- sort(unique(c(0, shiftedChangepoints2, length(series))))
}
#Record the means and sds and segments lengths associated with each segment.
means1 <- sds1 <- segLengths1 <-  rep(NA, length(changepoints1) - 1)
means2 <- sds2 <- segLengths2 <- rep(NA, length(changepoints2) - 1)
#Get the means, standard deviations, and segment lengths under the first set of changepoints.
for(i in 1:(length(changepoints1)-1)){
means1[i] <- mean(series[(changepoints1[i]+1):changepoints1[i+1]])
sds1[i] <- sd(series[(changepoints1[i]+1):changepoints1[i+1]])
segLengths1[i] <- changepoints1[i+1] - changepoints1[i]
}
#Get the means, standard deviations, and segment lengths under the second set of changepoints.
for(i in 1:(length(changepoints2)-1)){
means2[i] <- mean(series[(changepoints2[i]+1):changepoints2[i+1]])
sds2[i] <- sd(series[(changepoints2[i]+1):changepoints2[i+1]])
segLengths2[i] <- changepoints2[i+1] - changepoints2[i]
}
#In the case of segments with constant values, replace missing sd with 0.
sds1[which(is.na(sds1))] <- 0
sds2[which(is.na(sds2))] <- 0
#Record the observed change in the log-likelihood.
obsDiff <- getLogLik(series, changepoints2, means2, sds2, segLengths2) - getLogLik(series, changepoints1, means1, sds1, segLengths1)
obsDiff
library(changepointSelect)
#Simulation of a time series with changepoints, trends, and seasonality
#source("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Simulation.R")
series <- simSeries
simResults <- cpt.mean(series, penalty="CROPS", pen.value=c(0, 10e12), method="PELT", test.stat="Normal", class=F, minseglen=1)
#ASCEPT Parameters
alphaInit <- 0.01
numTrialsInit <- 10000
thresholdSeasonal = 1.2
thresholdLinear = 1.2
#Plotting parameters to highlight date ranges with known updates/glitches for the Precision VISSTA data
highlightKnownDates <- T
knownDates <- data.frame(start = c(as.Date("2017-08-01"), as.Date("2017-03-06"), as.Date("2017-09-03")),
end = c(as.Date("2017-08-10"), as.Date("2017-07-24"), as.Date("2017-09-07")))
#Plotting parameter to include changepoint detection/selection parameters (significance level, thresholds)
#in title.
titleWithParameters <- F
#Figure after intitial changepoint detection
#source("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Empirical P Values.R")
changepoints <- getChangepoints(series, alpha=alphaInit, numTrials=numTrialsInit, serial=F, numCores = 2)
plotTitle <- paste0("Simulated Data with Pre-trimmed Changepoints \nUsing a ", alphaInit, " Level and ", numTrialsInit, " Simulations")
plot(y=series, x=1:length(series), type="l",
xlab = "Index", ylab = paste0("Value"), main = plotTitle)
abline(v=changepoints, col=rgb(1,0,0,alpha=0.8), lwd=1)
#Figure after pruning for trends and seasonality
#source("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Trimming.R")
changepointsAfterTrim <- trimChangepoints(series = series, changepoints=changepoints, thresholdLinear=thresholdLinear, thresholdSeasonal=thresholdSeasonal)
plot(y=series, x=1:length(series), type="l",
xlab = "Index", ylab = paste0("Value"), main = plotTitle)
abline(v=changepointsAfterTrim, col=rgb(1,0,0,alpha=0.8), lwd=1)
library(changepointSelect)
rm(list=ls())
source("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Changepoint Pre-Trimmed Plots.R", echo=TRUE)
setwd("C:/Matt Work/Harvard/Mobile Health Project/R Package/changepointSelect")
source("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Changepoint Pre-Trimmed Plots.R", echo=TRUE)
source("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Diagrams/Diagram for Overall Results.R", echo=TRUE)
source("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Changepoint Trimmed Plots and Joint CBS Plots.R", echo=TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DNAcopy")
###Plots with both ASCEPT and CBS Changepoints###############
library(DNAcopy)
setwd("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Optimal Detection Trimmed and CBS Pruned Joint Plots")
variables = c("steps", "distance", "calories_burned", "active_duration", "awake", "deep", "light", "rem", "times_woken", "total_sleep")
variableNames = c("Steps Taken", "Distance Walked", "Calories Burned", "Time Spent Active", "Time Spent Awake at Night",
"Deep Sleep", "Light Sleep", "REM Sleep", "Times Woken at Night", "Total Sleep")
deviceGroups <- c("oldFitbit", "newFitbit", "garmin_connect")
deviceGroupNames <- c("Old Fitbit", "New Fitbit", "Garmin")
alpha <- 0.01
numTrials <- 10000
thresholdSeasonal = 1.2
thresholdLinear = 1.2
pruneThreshold = 0.5
#Plotting parameter to include changepoint detection/selection parameters (significance level, thresholds)
#in title.
titleWithParameters <- F
for(variable in variables){
for(deviceGroup in deviceGroups){
#Get the time series
if(variable %in% c("steps", "distance", "calories_burned", "light", "rem", "total_sleep")){
zeroIsInvalid <- T
} else{
zeroIsInvalid <- F
}
series <- getMedianSeries(dat=dfByDevice[[deviceGroup]], dateVar="date", variable=variable, zeroIsInvalid = zeroIsInvalid)
#Get the optimal changepoints if there are no missing dates
if(any(is.na(series))){
optChangepoints <- c()
optChangepointsAfterTrim <- c()
optChangepointsCBS <- c()
optChangepointsBoth <- c()
}
else{
#Data formatted for CBS
dat <- CNA(genomdat=series[,"medValues"], chrom=rep(1, length(series[,"medValues"])),
maploc=1:length(series[,"medValues"]), data.type=c("logratio"), sampleid=NULL, presorted = TRUE)
#Run serial = T for fewer than ~5000 trials
optChangepoints <- getChangepoints(series = series[,"medValues"], alpha=alpha, numTrials=numTrials, serial=F, numCores = 4)
optChangepointsAfterTrim <- trimChangepoints(series = series[,"medValues"], changepoints=optChangepoints, thresholdLinear=thresholdLinear, thresholdSeasonal=thresholdSeasonal)
#CBS
result <- segment(dat, p.method="perm", min.width = 2, undo.splits = "prune", undo.prune=pruneThreshold, alpha=alpha, nperm=numTrials)
optChangepointsCBS <- result$output$loc.end[-length(result$output$loc.end)]
optChangepointsBoth <- optChangepointsAfterTrim[optChangepointsAfterTrim %in% optChangepointsCBS]
}
#par(mfrow=c(2,1))
if(any(!is.na(series[,"medValues"])) ){
#Generate sequence of dates for labeling plots
startDate <- min(series[,"allDates"])
endDate <- max(series[,"allDates"])
#labelDates <- seq.Date(from=startDate, to=endDate, by="6 month")
labelDates <- seq.Date(from=as.Date("2015-01-01"), to=as.Date("2020-01-01"), by="6 month")
#Grab the nicely formatted names
variableName <- variableNames[which(variables==variable)]
deviceGroupName <- deviceGroupNames[which(deviceGroups==deviceGroup)]
#Adjust the y-axis based on the variable
ylabel <- variableName
y <- series[,"medValues"]
if(variable %in% c("active_duration", "awake", "deep", "light", "rem", "total_sleep")){
ylabel <- "Hours"
y <- y/3600
}
if(variable == "distance"){
ylabel <- "Meters"
}
#Save the plot
#print(paste0(deviceGroup, variable))
#png(paste0("Plot of ", deviceGroup, " for variable ", variable, " using ASCEPT with trimming threshold ", thresholdLinear, ".png"), height=1200, width=1500)
if(saveAsPDF){
pdf(paste0("Plot of ", variable, " for ", deviceGroup, " using ASCEPT with trimming threshold ", thresholdLinear, " and CBS with pruning threshold ", pruneThreshold, ".pdf"))
} else{
png(paste0("Plot of ", variable, " for ", deviceGroup, " using ASCEPT with trimming threshold ", thresholdLinear, " and CBS with pruning threshold ", pruneThreshold, ".png"), width = pngWidth, height = pngHeight)
}
par(mfrow=c(1,1))
if(titleWithParameters){
plotTitle <- paste0("Median ", variableName, " among Users of ", deviceGroupName, " Devices \nwith ASCEPT and CBS Changepoints, Using a ", alpha, " Level, ", numTrials, " Trials, \n a Trimming Threshold of ", thresholdLinear, " and a Pruning Threshold of ", pruneThreshold)
} else{
plotTitle <- paste0("Median ", variableName, " with ASCEPT and CBS Changepoints")
}
plot(y=y, x=series[,"allDates"], type="l", xaxt="n",
xlab = "", ylab = ylabel, main = plotTitle)
abline(v=series[,"allDates"][optChangepointsCBS], col="gray80", lwd=1.4, lty=1)
abline(v=series[,"allDates"][optChangepointsAfterTrim], col="red", lwd=1.4, lty=1)
abline(v=series[,"allDates"][optChangepointsBoth], col="gray80", lwd=1.4, lty=2)
points(y=y, x=series[,"allDates"], type="l") #Overlay data on top of changepoints
axis.Date(side = 1, at=labelDates, format = "%b-%Y", las=2)
dev.off()
}
}
}
#Simulated data
series <- simSeries
dat <- CNA(genomdat=series, chrom=rep(1, length(series)),
maploc=1:length(series), data.type=c("logratio"), sampleid=NULL, presorted = TRUE)
#Run serial = T for fewer than ~5000 trials
optChangepoints <- getChangepoints(series = series, alpha=alpha, numTrials=numTrials, serial=F, numCores = 4)
optChangepointsAfterTrim <- trimChangepoints(series = series, changepoints=optChangepoints, thresholdLinear=thresholdLinear, thresholdSeasonal=thresholdSeasonal)
#CBS
result <- segment(dat, p.method="perm", min.width = 2, undo.splits = "prune", undo.prune=pruneThreshold, alpha=alpha, nperm=numTrials)
optChangepointsCBS <- result$output$loc.end[-length(result$output$loc.end)]
optChangepointsBoth <- optChangepointsAfterTrim[optChangepointsAfterTrim %in% optChangepointsCBS]
#Save the plot
#print(paste0(deviceGroup, variable))
if(saveAsPDF){
pdf(paste0("sim_results_ASCEPT_CBS.pdf"))
} else{
png(paste0("sim_results_ASCEPT_CBS.png"), width = pngWidth, height = pngHeight)
}
par(mfrow=c(1,1))
if(titleWithParameters){
plotTitle <- paste0("Simulated Data \nwith ASCEPT and CBS Changepoints, Using a ", alpha, " Level, ", numTrials, " Trials, \n a Trimming Threshold of ", thresholdLinear, " and a Pruning Threshold of ", pruneThreshold)
} else{
plotTitle <- paste0("Simulated Data with ASCEPT and CBS Changepoints")
}
plot(y=series, x=1:length(series), type="l", xlab = "Index", ylab = paste0("Value"), main = plotTitle)
abline(v=optChangepointsCBS, col="gray80", lwd=1.4, lty=1)
abline(v=optChangepointsAfterTrim, col="red", lwd=1.4, lty=1)
abline(v=optChangepointsBoth, col="gray80", lwd=1.4, lty=2)
points(y=series, x=1:length(series), type="l")
dev.off()
view(getPValue())
??getPValue
getPValue
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints
simChangepointsTrimmed <- trimChangepoints(series=simSeries, changepoints=simChangepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
simChangepointsTrimmed
#For editing Stage 1 in terms of segments simulated
series <- simSeries
changepoints1 <- simResults$changepoints[[595]]
changepoints2 <- simResults$changepoints[[594]]
changepoints1
changepoints2
getPValue(series, changepoints1 = changepoints1, changepoints2 = changepoints2, numTrials = 10000)
system.time({
getPValue(series, changepoints1 = changepoints1, changepoints2 = changepoints2, numTrials = 10000)
})
series <- simSeries
changepoints1 <- c(305, 600)
changepoints2 <- c(305, 400, 600)
system.time({
getPValue(series, changepoints1 = changepoints1, changepoints2 = changepoints2, numTrials = 10000)
})
changepoints1 <- c(305, 600)
changepoints2 <- c(305, 400, 601)
system.time({
getPValue(series, changepoints1 = changepoints1, changepoints2 = changepoints2, numTrials = 10000)
})
getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4)
system.time({getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4)})
simResults$changepoints[[593]]
simResults$changepoints[[594]]
simResults$changepoints[[592]]
simResults$changepoints[[593]]
simResults$changepoints[[592]]
simResults$changepoints[[591]]
changepoints1 <- c(49, 60, 239, 305, 355, 600)
changepoints2 <- c(49, 60, 239, 305, 355, 600, 699, 700)
system.time({
getPValue(series, changepoints1 = changepoints1, changepoints2 = changepoints2, numTrials = 10000)
})
changepoints1 <- c(49, 60, 239, 305, 355, 600)
changepoints2 <- c(49, 60, 239, 304, 355, 600, 699, 700)
system.time({
getPValue(series, changepoints1 = changepoints1, changepoints2 = changepoints2, numTrials = 10000)
})
profvis::profvis({simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)})
profvis::profvis({simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 1)})
profvis::profvis({simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T, numCores = 1)})
head(simResults$changepoints)
tail(simResults$changepoints, 12)
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4)
})
library(changepointSelect)
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T) #17.28 for new code
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4) #9.57 for new code
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4) #9.57 for new code, 10.19 for old
})
library(changepointSelect)
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4) #9.57 for new code, 10.19 for old
})
30/17
10.19/9.15
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2) #9.15 for new code, 10.19 for old
})
variable <- "times_woken"
deviceGroup <- "newFitbit"
series <- getMedianSeries(dat=dfByDevice[[deviceGroup]], dateVar="date", variable=variable, zeroIsInvalid = zeroIsInvalid)
series
tail(series)
tail(series, 100)
findTotalSavings <- function(savingsByYear, interestRate=0.07, increaseSavingsRate=0){
totalYears <- length(savingsByYear)
years <- seq(totalYears, 1, by=-1)
#print(years)
#print(savingsByYear*((1+increaseSavingsRate)^(totalYears-years))*(1+interestRate)^years)
return(sum(savingsByYear*((1+increaseSavingsRate)^(totalYears -years))*(1+interestRate)^years))
}
savings <- rep(26000, 33)
findTotalSavings(savings, interestRate=0.10, increaseSavingsRate = 0)
savings <- rep(26000, 33)
findTotalSavings(savings, interestRate=0.07, increaseSavingsRate = 0)
savings <- rep(26000, 40)
findTotalSavings(savings, interestRate=0.1, increaseSavingsRate = 0.02)
savings <- rep(50000, 20)
findTotalSavings(savings, interestRate=0.1, increaseSavingsRate = 0.02)
savings <- rep(50000, 40)
findTotalSavings(savings, interestRate=0.1, increaseSavingsRate = 0.02)
28+26
savings <- rep(54000, 20)
findTotalSavings(savings, interestRate=0.05, increaseSavingsRate = 0.02)
savings <- rep(54000, 20)
findTotalSavings(savings, interestRate=0.1, increaseSavingsRate = 0.02)
savings <- rep(40000, 20)
findTotalSavings(savings, interestRate=0.1, increaseSavingsRate = 0.02)
savings <- rep(40000, 20)
findTotalSavings(savings, interestRate=0.1, increaseSavingsRate = 0.03)
1500000*.04
#############PLOTS########################
#Save plots of time series for various variables
setwd("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Time Series Plots")
variables = c("steps", "distance", "calories_burned", "active_duration", "awake", "deep", "light", "rem", "times_woken", "total_sleep")
variableNames = c("Steps Taken", "Distance Walked", "Calories Burned", "Time Spent Active", "Time Spent Awake at Night",
"Deep Sleep", "Light Sleep", "REM Sleep", "Times Woken at Night", "Total Sleep")
deviceGroups <- c("oldFitbit", "newFitbit", "garmin_connect")
deviceGroupNames <- c("Old Fitbit", "New Fitbit", "Garmin")
#Plotting parameter to include changepoint detection/selection parameters (significance level, thresholds)
#in title.
titleWithParameters <- F
#If true, will save images as pdfs. Otherwise, does pngs.
saveAsPDF <- F
pngWidth <- 1000
pngHeight <- 600
for(variable in variables){
for(deviceGroup in deviceGroups){
#Get the time series
if(variable %in% c("steps", "distance", "calories_burned", "light", "rem", "total_sleep")){
zeroIsInvalid <- T
} else{
zeroIsInvalid <- F
}
series <- getMedianSeries(dat=dfByDevice[[deviceGroup]], dateVar="date", variable=variable, zeroIsInvalid = zeroIsInvalid)
#par(mfrow=c(2,1))
if(any(!is.na(series[,"medValues"])) ){
#Generate sequence of dates for labeling plots
startDate <- min(series[,"allDates"])
endDate <- max(series[,"allDates"])
#labelDates <- seq.Date(from=startDate, to=endDate, by="6 month")
labelDates <- seq.Date(from=as.Date("2015-01-01"), to=as.Date("2020-01-01"), by="6 month")
#Grab the nicely formatted names
variableName <- variableNames[which(variables==variable)]
deviceGroupName <- deviceGroupNames[which(deviceGroups==deviceGroup)]
#Adjust the y-axis based on the variable
ylabel <- variableName
y <- series[,"medValues"]
if(variable %in% c("active_duration", "awake", "deep", "light", "rem", "total_sleep")){
ylabel <- "Hours"
y <- y/3600
}
if(variable == "distance"){
ylabel <- "Meters"
}
#Save the plot
#print(paste0(deviceGroup, variable))
if(saveAsPDF){
pdf(paste0("Plot of ", variable, " among ", deviceGroup, " users.pdf"))
} else{
png(paste0("Plot of ", variable, " among ", deviceGroup, " users.png"), width = pngWidth, height = pngHeight)
}
par(mfrow=c(1,1))
if(titleWithParameters){
plotTitle <- paste0("Median ", variableName, " among Users of ", deviceGroupName, " Devices")
} else{
plotTitle <- paste0("Median ", variableName)
}
plot(y=y, x=series[,"allDates"], type="l", xaxt="n",
xlab = "", ylab = ylabel, main = plotTitle)
axis.Date(side = 1, at=labelDates, format = "%b-%Y", las=2)
dev.off()
}
}
}
####Plots with number of contributing observations########
#Save plots of time series for various variables
setwd("C:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Time Series Plots with Contributing Observations")
variables = c("steps", "distance", "calories_burned", "active_duration", "awake", "deep", "light", "rem", "times_woken", "total_sleep")
variableNames = c("Steps Taken", "Distance Walked", "Calories Burned", "Time Spent Active", "Time Spent Awake at Night",
"Deep Sleep", "Light Sleep", "REM Sleep", "Times Woken at Night", "Total Sleep")
deviceGroups <- c("oldFitbit", "newFitbit", "garmin_connect")
deviceGroupNames <- c("Old Fitbit", "New Fitbit", "Garmin")
pngWidth <- 1000
pngHeight <- 1000
for(variable in variables){
for(deviceGroup in deviceGroups){
#Get the time series
if(variable %in% c("steps", "distance", "calories_burned", "light", "rem", "total_sleep")){
zeroIsInvalid <- T
} else{
zeroIsInvalid <- F
}
series <- getMedianSeries(dat=dfByDevice[[deviceGroup]], dateVar="date", variable=variable, zeroIsInvalid = zeroIsInvalid)
if(any(!is.na(series[,"medValues"])) ){
#Generate sequence of dates for labeling plots
startDate <- min(series[,"allDates"])
endDate <- max(series[,"allDates"])
#labelDates <- seq.Date(from=startDate, to=endDate, by="6 month")
labelDates <- seq.Date(from=as.Date("2015-01-01"), to=as.Date("2020-01-01"), by="6 month")
#Grab the nicely formatted names
variableName <- variableNames[which(variables==variable)]
deviceGroupName <- deviceGroupNames[which(deviceGroups==deviceGroup)]
#Adjust the y-axis based on the variable
ylabel <- variableName
y <- series[,"medValues"]
if(variable %in% c("active_duration", "awake", "deep", "light", "rem", "total_sleep")){
ylabel <- "Hours"
y <- y/3600
}
if(variable == "distance"){
ylabel <- "Meters"
}
#Save the plot
#print(paste0(deviceGroup, variable))
if(saveAsPDF){
pdf(paste0("Plot of ", variable, " among ", deviceGroup, " users.pdf"))
} else{
png(paste0("Plot of ", variable, " among ", deviceGroup, " users.png"), width = pngWidth, height = pngHeight)
}
par(mfrow=c(2,1))
par(mar=c(3.0, 4.2, 3.5, 2.1))
par(cex.axis=1.5, cex.lab=1.5, cex.main=1.5, cex.sub=1)
plot(y=y, x=series[,"allDates"], type="l", xaxt="n",
xlab = "", ylab = ylabel,
#main = paste0("Median ", variableName, " among Users of ", deviceGroupName, " Devices"))
main = paste0("Median ", variableName))
#axis.Date(side = 1, at=labelDates, format = "%b-%Y", las=2)
par(mar=c(6.5, 4.2, 0.0, 2.1))
plot(y=series[,"numObs"], x=series[,"allDates"], type="l", xaxt="n",
main = "", xlab = "", ylab = "Number of Non-missing Observations", ylim=c(0, max(series[,"numObs"])))
axis.Date(side = 1, at=labelDates, format = "%b-%Y", las=2)
dev.off()
}
}
}
exp(-10000)
ln(0.001)
log(0.001)
log(0.00000001)
log(0)
dnorm(c(0,0,0,0,0))
dnorm(c(0,0,0,0,0), log=T)
sum(dnorm(c(0,0,0,0,0), log=T))
sum(dnorm(c(0,0,0,0,0), mean=0, sd=1, log=T))
sum(dnorm(c(0,0,0,0,0), mean=0, sd=0.001, log=T))
sum(dnorm(c(0,0,0,0,0), mean=0, sd=0.00001, log=T))
sum(dnorm(c(0,0,0,0,0), mean=0, sd=0.0000, log=T))
dnorm(0, mean=0, sd=0)
sum(dnorm(c(0,0,0,0,0), mean=0, sd=1, log=T))
sum(dnorm(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), mean=0, sd=1, log=T))
sum(dnorm(c(10,0,0,0,0,0,0,0,0,0,0,0,0,0,0), mean=0, sd=1, log=T))
sum(dnorm(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0), mean=0, sd=1, log=T))
library(changepointSelect)
R
r
info()
version
install.packages("changepoint")
install.packages("doParallel")
library(changepointSelect)
(T || T || F)
(T | T | F)
if(T | T | F){
print("Test")
}
if(T || T || F){
print("Test")
}
library(changepointSelect)
library(changepointSelect)
