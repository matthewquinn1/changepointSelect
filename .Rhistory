all(simChangepoints2 == simChangepoints3)
all(simChangepoints3 == simChangepoints4)
all(simChangepoints4 == simChangepoints5)
all(simChangepoints1 == simChangepoints5)
simChangepoints5
library(changepointSelect)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints
simChangepoints <- getChangepoints(series=c(1,2,3,4,5,100,5,4,3,2,1), alpha=0.01, numTrials=10000, serial=F, numCores = 5)
simChangepoints <- getChangepoints(series=c(4,5,100,5,4), alpha=0.01, numTrials=10000, serial=F, numCores = 5)
simChangepoints <- getChangepoints(series=c(4,5,100,5,4), alpha=0.01, numTrials=10000, serial=F, numCores = 5)
simChangepoints <- getChangepoints(series=c(4,5,100,5,4, 4, 4, 5, 100, 4, 4, 4, 5, 100, 4, 5, 4), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints <- getChangepoints(series=c(4,5,100, 100,5,4, 4, 4, 5, 100, 100, 4, 4, 4, 5, 100, 100, 4, 5, 4), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints <- getChangepoints(series=c(rep(4, 20), rep(100, 20)), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints <- getChangepoints(series=c(rep(rep(4, 20), rep(100, 20)), 3), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
rep(rep(4, 20), rep(100, 20)), 3)
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 20), rep(100, 20))), 3), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
c(rep(c(rep(4, 20), rep(100, 20))), 3)
c(rep(c(rep(4, 20), rep(100, 20)), 3))
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 20), rep(100, 20)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=T)
temp <- c(rep(c(rep(4, 50), rep(100, 50)), 3))
temp
cpt.mean(c(rep(c(rep(4, 50), rep(100, 50)), 3)))
cpt.mean(c(rep(c(rep(4, 50), rep(100, 50)), 3)), penalty="CROPS", pen.value=c(0, 10e12), method="PELT", test.stat="Normal", minseglen = 1)
simChangepoints
library(changepointSelect)
temp
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=T)
simChangepoints
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 4)
simChangepoints
library(changepointSelect)
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 4)
simChangepoints
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=T)
simChangepoints
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 3)
})
1:1
library(changepointSelect)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints1 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
all(simChangepoints == simChangepoints1)
temp <- rep(c(rep(5, 20), rep(100, 20)), 5)
temp
simChangepoints1 <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=T)
simChangepoints
simChangepoints1
simChangepoints1 <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
series <- temp
series
#Run CROPS on PELT to detect changepoints based on changes in mean.
#capture.output prevents progress messages that are printed by running CROPS.
capture.output(results <- cpt.mean(series, penalty="CROPS", pen.value=c(minPenalty, maxPenalty), method="PELT", test.stat="Normal", class=F, minseglen=1)$changepoints)
minPenalty=0
maxPenalty=10e12
#Run CROPS on PELT to detect changepoints based on changes in mean.
#capture.output prevents progress messages that are printed by running CROPS.
capture.output(results <- cpt.mean(series, penalty="CROPS", pen.value=c(minPenalty, maxPenalty), method="PELT", test.stat="Normal", class=F, minseglen=1)$changepoints)
results
#Start at end of "results", corresponding to no changepoints. Iterate backwards, including more changepoints.
maxIndex <- length(results)
index <- maxIndex
numCores <- 2
#Track the indices of which set of changepoints should be assessed for significance
indices <- maxIndex:(maxIndex-numCores+1)
pValues <- rep(0, length(indices))
indices
(max(pValues) < alpha) & (max(indices) > 1)
alpha = 0.01
(max(pValues) < alpha) & (max(indices) > 1)
min(indices) > 1
indices <- indices[1]:2
pValues <- rep(0, length(indices))
indices
library(changepointSelect)
rm(list=ls())
library(changepointSelect)
simChangepoints2 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
all(simChangepoints == simChangepoints2)
temp <- rep(c(rep(5,20), rep(100, 20)), 5)
temp
simChangepoints <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=T)
simChangepoints
simChangepoints2 <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=2)
simChangepoints2
indices <- 2
numCores <- 2
#Decrement the indices associated with the sets of changepoints
indices <- indices - numCores
indices[length(indices)] + numCores
library(changepointSelect)
rm(numCores)
temp
simChangepoints2 <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=2)
simChangepoints <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=T)
simChangepoints2
simChangepoints
simChangepoints4 <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=4)
simChangepoints4
temp[25] <- 500
simChangepoints <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=T)
simChangepoints
simChangepoints <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=2)
simChangepoints
simChangepoints <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=4)
simChangepoints
simChangepoints <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=3)
simChangepoints
temp
which(diff(temp)>0)
which(diff(temp)!-0)
which(diff(temp)!=0)
trimChangepoints(series=temp, changepoints=simChangepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
5/0
series <- temp
changepoints <- simChangepoints
simChangepoints
thresholdLinear <- 1.15
thresholdSeasonal <- 1.15
numHarmonics <- 2
if((thresholdLinear < 1) | (thresholdSeasonal < 1)){
stop("The trimming threshold should be no smaller than 1.")
}
if(length(series) < 1){
stop("The series must be a vector containing at least 1 observation.")
}
if(length(changepoints) < 1){
stop("The changepoints must be in a vector and there must be at least 1 changepoint.")
}
#Include 0 and n as endpoints.
changepoints <- unique(c(0, changepoints, length(series)))
changepoints
linearResults <- seasonalResults <- piecewiseResults <- rep(NA, length(changepoints) - 2)
#Get the overall linear fit, harmonic fit, and piecewise fit RMSEs corresponding to each changepoint.
for(i in 1:(length(changepoints)-2)){
linearResults[i] <- getLinearRMSE(series[(changepoints[i]+1):changepoints[i+2]])
seasonalResults[i] <- getHarmonicRMSE(series[(changepoints[i]+1):changepoints[i+2]], numHarmonics)
piecewiseResults[i] <- getPiecewiseRMSE(series[(changepoints[i]+1):changepoints[i+2]], changepoint=changepoints[i+1]-changepoints[i], numHarmonics)
}
ratiosLinear <- linearResults/piecewiseResults
ratiosSeasonal <- seasonalResults/piecewiseResults
ratios <- pmin(ratiosLinear, ratiosSeasonal) #Take smallest ratio across linear trends and seasonality
ratios
ratiosLinear
ratiosSeasonal
linearResults
seasonalResults
piecewiseResults
changepoints
i = 2
series[(changepoints[i]+1):changepoints[i+2]]
subseries <- series[(changepoints[i]+1):changepoints[i+2]]
series <- series[(changepoints[i]+1):changepoints[i+2]]
x <- 1:length(series)
#Fit model with first two harmonics
#https://stats.stackexchange.com/questions/60500/how-to-find-a-good-fit-for-semi-sinusoidal-model-in-r
#https://stats.stackexchange.com/questions/60994/fit-a-sinusoidal-term-to-data
ssp <- spectrum(series, plot=F, method="pgram")
per <- 1/ssp$freq[ssp$spec==max(ssp$spec)][1]
per
ssp
fitHarmonic <- lm(series~ sin(2*pi*x/per)+cos(2*pi*x/per) + sin(4*pi*x/per)+cos(4*pi*x/per))
fitHarmonic
sqrt(mean(resid(fitHarmonic)^2))
resid(fitHarmonic)
series
per
x
fitHarmonic$fitted.values
cos(2*pi*1)
cos(4*pi*1)
series
x
per
predict(fitHarmonic, newdata=c(1,2,3))
fitHarmonic
cos(2*pi*4/5)
cos(4*pi*4/5)
#Sometimes multiple fits may be perfect (namely for very short segments). If piecewise is perfect, automatically set
#ratio to be Inf in case a ratio is actually 0/0, yielding NaN
perfect <- which(piecewiseResults == 0)
perfect
ratiosLinear
ratiosSeasonal
ratiosLinear[perfect] <- Inf
ratiosSeasonal[perfect] <- Inf
ratiosLinear
ratiosSeasonal
ratios
ratios <- pmin(ratiosLinear, ratiosSeasonal) #Take smallest ratio across linear trends and seasonality
ratios
library(changepointSelect)
temp
simChangepoints
trimChangepoints(series=temp, changepoints=simChangepoints, thresholdLinear=1.2, thresholdSeasonal=1.2)
trimChangepoints(series=temp, changepoints=simChangepoints, thresholdLinear=1.5, thresholdSeasonal=1.5)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
library(changepointSelect)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4)
getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
temp
getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores = 4)
getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores = 3)
getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=T)
temp
library(changepointSelect)
getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=T)
getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=2)
getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=3)
getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=4)
getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
changepoints <- getChangepoints(series=temp, alpha=0.01, numTrials=10000, serial=F, numCores=4)
changepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
changepoints2 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores=2)
changepoints3 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores=3)
changepoints4 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores=4)
all(changepoints == changepoints2)
all(changepoints2 == changepoints3)
all(changepoints3 == changepoints4)
all(changepoints == changepoints4)
changepoint
changepoints
changepoints4
library(changepointSelect)
time()
Sys.time()
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
})
result
result["elapsed"]
trials <- c(10, 50, 100, 500, 1000, 50000, 10000, 50000, 100000)
timesRefined <- rep(NA, length(trials))
for(i in 1:length(trials)){
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
timesRefined[i] <- result["elapsed"]
}
trials <- c(10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000)
timesRefined <- rep(NA, length(trials))
for(i in 1:length(trials)){
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
timesRefined[i] <- result["elapsed"]
}
timesRefined
library(changepointSelect)
timesRefined
#Need to edit package code to use base functions, reload package, and run below.
#DON'T FORGET TO EDIT BACK TO THE REFINED CODE AFTERWARDS
library(changepointSelect)
timesOriginal <- rep(NA, length(trials))
for(i in 1:length(trials)){
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
timesOriginal[i] <- result["elapsed"]
}
timesOriginal
timesOriginal/timesRefined
rm(list=ls())
#Need to edit package code to use base functions, reload package, and run below.
#DON'T FORGET TO EDIT BACK TO THE REFINED CODE AFTERWARDS
library(changepointSelect)
timesOriginal <- rep(NA, length(trials))
trials <- c(10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000)
numRepeat <- 5
#Need to edit package code to use base functions, reload package, and run below.
#DON'T FORGET TO EDIT BACK TO THE REFINED CODE AFTERWARDS
library(changepointSelect)
timesOriginal <- rep(NA, length(trials))
for(i in 1:length(trials)){
for(j in 1:numRepeat){
temp <- rep(NA,numRepeat)
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
timesOriginal[i] <- mean(temp)
}
trials <- c(10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000)
numRepeat <- 5
set.seed(1)
#Need to edit package code to use base functions, reload package, and run below.
#DON'T FORGET TO EDIT BACK TO THE REFINED CODE AFTERWARDS
library(changepointSelect)
timesOriginal <- rep(NA, length(trials))
for(i in 1:length(trials)){
for(j in 1:numRepeat){
temp <- rep(NA,numRepeat)
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
timesOriginal[i] <- mean(temp)
}
timesOriginal
i <_ 1
i <- 1
for(j in 1:numRepeat){
temp <- rep(NA,numRepeat)
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
temp
trials <- c(50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000)
numRepeat <- 5
set.seed(1)
timesOriginal <- rep(NA, length(trials))
for(j in 1:numRepeat){
temp <- rep(NA,numRepeat)
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
temp
temp[1] <- -.1
temp[2] <- 0.2
temp
1:numRepeat
for(j in 1:numRepeat){
print(j)
temp <- rep(NA,numRepeat)
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
for(j in 1:numRepeat){
print(j)
temp <- rep(NA,numRepeat)
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
print(temp[j])
}
temp
timesOriginal <- rep(NA, length(trials))
temp <- rep(NA,numRepeat)
for(j in 1:numRepeat){
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
temp
trials <- c(10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000)
numRepeat <- 5
set.seed(1)
timesOriginal <- rep(NA, length(trials))
for(i in 1:length(trials)){
temp <- rep(NA,numRepeat)
for(j in 1:numRepeat){
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
timesOriginal[i] <- mean(temp)
}
timesOriginal
library(changepointSelect)
#Edit code back to refined version, using manually-defined functions
library(changepointSelect)
timesRefined <- rep(NA, length(trials))
set.seed(1)
for(i in 1:length(trials)){
temp <- rep(NA,numRepeat)
for(j in 1:numRepeat){
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
timesRefined[i] <- mean(temp)
}
timesRefined
plot(x = log10(trials), y = timesOriginal, main = "Runtime Comparison", xlab="Log_10 Number of Monte Carlo Simulations", ylab = "Runtime",
type="l", color="red", lwd=2)
points(x=log10(trials), y = timesRefined, type="l", color="blue", lwd=2)
plot(x = log10(trials), y = timesOriginal, main = "Runtime Comparison", xlab="Log_10 Number of Monte Carlo Simulations", ylab = "Runtime",
type="l", col="red", lwd=2)
points(x=log10(trials), y = timesRefined, type="l", col="blue", lwd=2)
plot(x = trials, y = timesOriginal, main = "Runtime Comparison", xlab="Log_10 Number of Monte Carlo Simulations", ylab = "Runtime",
type="l", col="red", lwd=2)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2)
plot(x = trials, y = timesOriginal, main = "Runtime Comparison", xlab="Number of Monte Carlo Simulations", ylab = "Runtime",
type="l", col="red", lwd=2)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2)
legend("bottomright", legend = c("Base Non-primitive Functions", "Primitive Functions"), col=c("red", "blue"), lty=rep(1, 2), pch=rep(19, 2))
plot(x = trials, y = timesOriginal, main = "Runtime Comparison", xlab="Number of Monte Carlo Simulations", ylab = "Runtime (seconds)",
type="l", col="red", lwd=2)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2)
legend("bottomright", legend = c("Base Non-primitive Functions", "Primitive Functions"), col=c("red", "blue"), lty=rep(1, 2), pch=rep(19, 2))
plot(x = trials, y = timesOriginal, main = "Runtime Comparison in Serial", xlab="Number of Monte Carlo Simulations", ylab = "Runtime (seconds)",
type="l", col="red", lwd=2)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2)
plot(x = trials, y = timesOriginal, main = "Runtime Comparison", xlab="Number of Monte Carlo Simulations", ylab = "Runtime (seconds)",
type="l", col="red", lwd=2)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2)
legend("bottomright", legend = c("Base Non-primitive Functions", "Primitive Functions"), col=c("red", "blue"), lty=rep(1, 2), pch=rep(19, 2))
points(x=trials, y = timesRefined, col="blue", pch=19)
library(changepointSelect)
trials <- c(10, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000)
numRepeat <- 5
rm(list=ls())
trials <- c(10, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000)
numRepeat <- 5
set.seed(1)
#Need to edit package code to use base functions, reload package, and run below.
#DON'T FORGET TO EDIT BACK TO THE REFINED CODE AFTERWARDS
library(changepointSelect)
timesOriginal <- rep(NA, length(trials))
for(i in 1:length(trials)){
temp <- rep(NA,numRepeat)
for(j in 1:numRepeat){
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
timesOriginal[i] <- mean(temp)
}
timesOriginal
library(changepointSelect)
#Edit code back to refined version, using manually-defined functions
library(changepointSelect)
timesRefined <- rep(NA, length(trials))
set.seed(1)
for(i in 1:length(trials)){
temp <- rep(NA,numRepeat)
for(j in 1:numRepeat){
result <-  system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=trials[i], serial=T)
})
temp[j] <- result["elapsed"]
}
timesRefined[i] <- mean(temp)
}
timesRefined
plot(x = trials, y = timesOriginal, main = "Runtime Comparison\nRuntimes taken as averages over 5 trials",
xlab="Number of Monte Carlo Simulations per Significance Assessment", ylab = "Runtime (seconds)",
type="l", col="red", lwd=2)
points(x=trials, y = timesRefined, col="blue", pch=19)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2)
points(x=trials, y = timesOriginal, col="red", pch=19)
points(x=trials, y = timesRefined, col="blue", pch=19)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2)
legend("bottomright", legend = c("Base Non-primitive Functions", "Primitive Functions"), col=c("red", "blue"), lty=rep(1, 2), pch=rep(19, 2))
points(x=trials, y = timesOriginal, col="red", pch=19, cex=2)
legend("bottomright", legend = c("Base Non-primitive Functions", "Primitive Functions"), col=c("red", "blue"), lty=rep(1, 2), pch=rep(19, 2), cex=2)
legend("bottomright", legend = c("Base Non-primitive Functions", "Primitive Functions"), col=c("red", "blue"), lty=rep(1, 2), pch=rep(19, 2), cex=1.5)
plot(x = trials, y = timesOriginal, main = "Runtime Comparison\nRuntimes taken as averages over 5 trials",
xlab="Number of Monte Carlo Simulations per Significance Assessment", ylab = "Runtime (seconds)",
type="l", col="red", lwd=2.5)
points(x=trials, y = timesOriginal, col="red", pch=19, cex=1.5)
points(x=trials, y = timesRefined, col="blue", pch=19, cex=1.5)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2.5)
legend("bottomright", legend = c("Base Non-primitive Functions", "Primitive Functions"), col=c("red", "blue"), lty=rep(1, 2), pch=rep(19, 2), cex=1.5)
png("C:\\Matt Work\Harvard\\Mobile Health Project\\Changepoint DetectionSerial_Runtime_Comparison_Base_Primitive_Functions.png", width=700, height=600)
png("C:\\Matt Work\\Harvard\\Mobile Health Project\\Changepoint DetectionSerial_Runtime_Comparison_Base_Primitive_Functions.png", width=700, height=600)
plot(x = trials, y = timesOriginal, main = "Runtime Comparison\nRuntimes taken as averages over 5 trials",
xlab="Number of Monte Carlo Simulations per Significance Assessment", ylab = "Runtime (seconds)",
type="l", col="red", lwd=2.5)
points(x=trials, y = timesOriginal, col="red", pch=19, cex=1.5)
points(x=trials, y = timesRefined, col="blue", pch=19, cex=1.5)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2.5)
legend("bottomright", legend = c("Base Non-primitive Functions", "Primitive Functions"), col=c("red", "blue"), lty=rep(1, 2), pch=rep(19, 2), cex=1.5)
dev.off()
png("C:\\Matt Work\\Harvard\\Mobile Health Project\\Changepoint Detection\\Serial_Runtime_Comparison_Base_Primitive_Functions.png", width=700, height=600)
plot(x = trials, y = timesOriginal, main = "Runtime Comparison\nRuntimes taken as averages over 5 trials",
xlab="Number of Monte Carlo Simulations per Significance Assessment", ylab = "Runtime (seconds)",
type="l", col="red", lwd=2.5)
points(x=trials, y = timesOriginal, col="red", pch=19, cex=1.5)
points(x=trials, y = timesRefined, col="blue", pch=19, cex=1.5)
points(x=trials, y = timesRefined, type="l", col="blue", lwd=2.5)
legend("bottomright", legend = c("Base Non-primitive Functions", "Primitive Functions"), col=c("red", "blue"), lty=rep(1, 2), pch=rep(19, 2), cex=1.5)
dev.off()
NULL %in% c("temp")
round(53.380234892342, 2)
grep("condition", c("condition1", "condition2", "value"))
