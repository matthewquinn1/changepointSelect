savings <- rep(50000, 20)
findTotalSavings(savings, interestRate=0.05, increaseSavingsRate = 0.02)
savings <- c(rep(50000, 10), rep(75000, 5), rep(100000, 5), rep(125000, 5))
findTotalSavings(savings, interestRate=0.05, increaseSavingsRate = 0.00)
savings <- rep(100000, 20)
findTotalSavings(savings, interestRate=0.05, increaseSavingsRate = 0.02)
findTotalSavings(savings, interestRate=0.10, increaseSavingsRate = 0.02)
savings <- rep(100000, 30)
findTotalSavings(savings, interestRate=0.10, increaseSavingsRate = 0.02)
temp <- c(1,1,1,1,1)
sd(temp)
library(changepointSelect)
simSeries
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=25000, serial=F, numCores = 2)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=50000, serial=F, numCores = 2)
})
2e-05
1/50000
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=50000, serial=T)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=50000, serial=T)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=50000, serial=F, numCores = 6)
})
profvis::profvis({  simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=50000, serial=F, numCores = 6)})
?getPValue
profvis::profvis({getPValue(series=simSeries, changepoints1=c(49, 60), changepoints2 = c(49,60,600), numTrials=50000, serial=T)})
sd(c(1))
sdsVec <- c(1,2,3,NA,5,6,7,NA,9,10)
#Get the logLikelihood of the entire series, ignoring segments that only have one observation (i.e. sd is NA)
moreThanOne <- which(!is.na(sdsVec) & sdsVec != 0)
moreThanOne
sdsVec[moreThanOne]
#Get the logLikelihood of the entire series, ignoring segments that only have one observation (i.e. sd is NA)
moreThanOne <- (!is.na(sdsVec) & sdsVec != 0)
sdsVec[moreThanOne]
temp <- rnorm(100)
temp <- rnorm(100)
system.time({
for(i in 1:50000){
mean(temp)
}
})
temp <- rnorm(1000)
system.time({
for(i in 1:500000){
mean(temp)
}
})
system.time({
for(i in 1:500000){
sum(temp)/length(temp)
}
})
system.time({
for(i in 1:500000){
sum(temp)/length(temp)
}
})
temp <- rnorm(1000)
system.time({
for(i in 1:1000000){
mean(temp)
}
})
system.time({
for(i in 1:1000000){
sum(temp)/length(temp)
}
})
?sum
?length
system.time({
for(i in 1:1000000){
mean(temp, na.rm=T)
}
})
system.time({
for(i in 1:1000000){
sum(temp, na.rm=T)/sum(!is.na(temp))
}
})
temp
sd(temp)
sqrt(mean((temp - mean(temp))^2))
sqrt((1/(length(temp)-1))*((temp - mean(temp))^2))
sqrt((1/(length(temp)-1))*sum((temp - mean(temp))^2))
sd(temp)
temp
changepoints <- c(100, 200)
i = i
subSeries <- series[(changepoints[i]+1):changepoints[i+1]]
series <- temp
subSeries <- series[(changepoints[i]+1):changepoints[i+1]]
changepoints
i
i = 1
subSeries <- series[(changepoints[i]+1):changepoints[i+1]]
subSeries
changepoints[i+1] - changepoints[i]
length(subSeries)
mean(subSeries)
segLengths <- rep(NA, 2)
segLengths[i] <- changepoints[i+1] - changepoints[i]
means <- rep(NA, 2)
sds <- rep(NA,2)
segLengths[i] <- changepoints[i+1] - changepoints[i]
means[i] <- sum(subSeries)/segLengths[i] #mean(subSeries)
sds[i] <- sqrt((1/(segLengths[i]-1))*sum((subSeries - means[i])^2)) #sd(subSeries)
segLengths[i]
length(subSeries)
means[i]
mean(subSeries)
sds[i]
sd(subSeries)
vars <- rep(NA, 2)
vars[i] <- (1/(segLengths[i]-1))*sum((subSeries - means[i])^2) #var(subSeries)
vars[i]
var(subSeries)
i = 2
subSeries <- series[(changepoints[i]+1):changepoints[i+1]]
segLengths[i] <- changepoints[i+1] - changepoints[i]
changepoints
changepoints <- c(0, 100, 200, length(series))
changepoints
#The mean() and sd() functions are avoided to reduce runtime by not performing error checks.
#They are therefore written out manually below.
for(i in 1:(length(changepoints)-1)){
subSeries <- series[(changepoints[i]+1):changepoints[i+1]]
segLengths[i] <- changepoints[i+1] - changepoints[i]
means[i] <- sum(subSeries)/segLengths[i] #mean(subSeries)
sds[i] <- sqrt((1/(segLengths[i]-1))*sum((subSeries - means[i])^2)) #sd(subSeries)
}
segLengths
means
sds
i = 1
subSeries <- series[(changepoints[i]+1):changepoints[i+1]]
mean(subSeries)
sds(subSeries)
sd(subSeries)
i = 2
subSeries <- series[(changepoints[i]+1):changepoints[i+1]]
means[i] <- sum(subSeries)/segLengths[i] #mean(subSeries)
means
mean(subSeries)
sd(subSeries)
i = 3
mean(subSeries)
sd(subSeries)
subSeries <- series[(changepoints[i]+1):changepoints[i+1]]
mean(subSeries)
sd(subSeries)
means
sds
#Prepare means and sds by obs
meansVec <- rep(means, times=segLengths)
sdsVec <- rep(sds, times=segLengths)
meansVec
sdsVec
#Get the logLikelihood of the entire series, ignoring segments that only have one observation (i.e. sd is NA) or are constant (i.e. sd = 0).
moreThanOne <- (!is.na(sdsVec) & sdsVec != 0)
moreThanOne
sdsVec[moreThanOne]
sdsVec
sum(dnorm(series[moreThanOne], mean=meansVec[moreThanOne], sd=sdsVec[moreThanOne], log=T))
-(n/2)*ln(2*pi) - (n/2)*ln(sdsVec[moreThanOne]^2) - (1/(2*sdsVec[moreThanOne]^2))*sum(subSeries - means[moreThanOne])
sum(-(1/2)*ln(2*pi) - (1/2)*ln(sdsVec[moreThanOne]^2) - (1/(2*sdsVec[moreThanOne]^2))*(subSeries - means[moreThanOne]))
sum(-(1/2)*log(2*pi) - (1/2)*log(sdsVec[moreThanOne]^2) - (1/(2*sdsVec[moreThanOne]^2))*(subSeries - means[moreThanOne]))
sum(-(1/2)*log(2*pi) - (1/2)*log(sdsVec[moreThanOne]^2) - (1/(2*sdsVec[moreThanOne]^2))*(subSeries[moreThanOne] - meansVec[moreThanOne]))
subSeries
-(1/2)*log(2*pi) - (1/2)*log(sdsVec[moreThanOne]^2) - (1/(2*sdsVec[moreThanOne]^2))*(subSeries[moreThanOne] - meansVec[moreThanOne])
meansVec
sdsVec
sum(-(1/2)*log(2*pi) - (1/2)*log(sdsVec[moreThanOne]^2) - (1/(2*sdsVec[moreThanOne]^2))*(series[moreThanOne] - meansVec[moreThanOne]))
sum(dnorm(series[moreThanOne], mean=meansVec[moreThanOne], sd=sdsVec[moreThanOne], log=T))
sum(-(1/2)*log(2*pi) - (1/2)*log(sdsVec[moreThanOne]^2) - (1/(2*sdsVec[moreThanOne]^2))*((series[moreThanOne] - meansVec[moreThanOne])^2))
library(changepointSelect)
library(changepointSelect)
simSeries
rm(list=ls())
library(changepointSelect)
system.time({ #329 seconds
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=50000, serial=F, numCores = 2)
})
198/329
system.time({ #337 seconds before modifications on mean(), sd(), dnorm()
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=50000, serial=T)
})
144/337
system.time({ #247 seconds before modifications on mean(), sd(), dnorm()
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=50000, serial=F, numCores = 6)
})
profvis::profvis({getChangepoints(series=simSeries, alpha=0.01, numTrials=50000, serial=T)})
simChangepoints
144/12
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
})
30/45
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
})
profvis::profvis({getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)})
library(changepointSelect)
profvis::profvis({ getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)})
library(changepointSelect)
getChangepoints(series=c(simSeries, NA, 150), alpha=0.01, numTrials=10000, serial=T)
library(changepointSelect)
893
894:(894-4)
894:(894-4+1)
indices <- 894:(894-4+1)
indices
indices - 4
?break
library(changepointSelect)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
library(changepointSelect)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
series <- simSeries
alpha = 0.01
numTrials <- 10000
serial <- F
numCores <- 2
minPenalty <- 0
maxPenalty <- 10e12
verbose <- T
cl <- makeCluster(max(1, numCores))
registerDoParallel(cl)
#Run CROPS on PELT to detect changepoints based on changes in mean.
#capture.output prevents progress messages that are printed by running CROPS.
capture.output(results <- cpt.mean(series, penalty="CROPS", pen.value=c(minPenalty, maxPenalty), method="PELT", test.stat="Normal", class=F, minseglen=1)$changepoints)
pValue <- 0
#Start at end of "results", corresponding to no changepoints. Iterate backwards, including more changepoints.
maxIndex <- length(results)
if(maxIndex == 1){
stop("Only one set of changepoints found. Please try decreasing minPenalty towards 0 and/or increasing maxPenalty.")
}
index <- maxIndex
results
#Track the indices of which set of changepoints should be assessed for significance
indices <- maxIndex:(maxIndex-numCores+1)
pValues <- rep(0, length(indices))
indices
pValues
(max(pValues) < alpha)
(min(indices) > 1)
pValues <- foreach(i=indices, .combine=c) %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
library(changepointSelect)
pValues <- foreach(i=indices, .combine=c) %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
?getPValue
pValues <- foreach(i=indices, .combine=c) %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
indices
library(foreach)
library(doParallel)
pValues <- foreach(i=indices, .combine=c) %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
pValues <- foreach(i=indices, .combine=c, .packages = "changepointSelect") %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
pValues
if(verbose){
for(i in 1:length(indices)){
if(pValues[i] < alpha){
if(pValues[i] == 0){
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value below:", 1/numTrials))
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value:", pValue))
}
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "insignificant with empirical p-value:", pValue))
break
}
}
}
indices
#Decrement the indices associated with the sets of changepoints
indices <- indices - numCores
indices
pValues <- foreach(i=indices, .combine=c, .packages = "changepointSelect") %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
pValues
#Decrement the indices associated with the sets of changepoints
indices <- indices - numCores
indices
#Decrement the indices associated with the sets of changepoints
indices <- indices - numCores
#Decrement the indices associated with the sets of changepoints
indices <- indices - numCores
pValues <- foreach(i=indices, .combine=c, .packages = "changepointSelect") %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
pValues
#Decrement the indices associated with the sets of changepoints
indices <- indices - numCores
pValues <- foreach(i=indices, .combine=c, .packages = "changepointSelect") %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
pValues
if(verbose){
for(i in 1:length(indices)){
if(pValues[i] < alpha){
if(pValues[i] == 0){
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value below:", 1/numTrials))
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value:", pValue))
}
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "insignificant with empirical p-value:", pValue))
break
}
}
}
pValues
if(verbose){
for(i in 1:length(indices)){
if(pValues[i] < alpha){
if(pValues[i] == 0){
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value below:", 1/numTrials))
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value:", pValues[i]))
}
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "insignificant with empirical p-value:", pValues[i]))
break
}
}
}
#Decrement the indices associated with the sets of changepoints
indices <- indices - numCores
indices
#Record which set of changepoints is the first to be insignificant, if such occurs
if(max(pvalues) >= alpha){
index <- indices[min(which(pvalues >= alpha))] + numCores
}
#Record which set of changepoints is the first to be insignificant, if such occurs
if(max(pvalues) >= alpha){
index <- indices[min(which(pValues >= alpha))] + numCores
}
#Record which set of changepoints is the first to be insignificant, if such occurs
if(max(pValues) >= alpha){
index <- indices[min(which(pValues >= alpha))] + numCores
}
index
#Record which set of changepoints is the first to be insignificant, if such occurs
if(max(pValues) >= alpha){
index <- indices[min(which(pValues >= alpha))] + numCores - 1
}
index
numCores <- 4
stopCluster(cl)
cl <- makeCluster(max(1, numCores))
registerDoParallel(cl)
pValue <- 0
#Start at end of "results", corresponding to no changepoints. Iterate backwards, including more changepoints.
maxIndex <- length(results)
index <- maxIndex
#Track the indices of which set of changepoints should be assessed for significance
indices <- maxIndex:(maxIndex-numCores+1)
pValues <- rep(0, length(indices))
#Get results in parallel for next group of sets of changepoints.
while((max(pValues) < alpha) & (min(indices) > 1)){
pValues <- foreach(i=indices, .combine=c, .packages = "changepointSelect") %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
if(verbose){
for(i in 1:length(indices)){
if(pValues[i] < alpha){
if(pValues[i] == 0){
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value below:", 1/numTrials))
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value:", pValues[i]))
}
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "insignificant with empirical p-value:", pValues[i]))
break
}
}
}
#Decrement the indices associated with the sets of changepoints
indices <- indices - numCores
}
#Track the indices of which set of changepoints should be assessed for significance
indices <- maxIndex:(maxIndex-numCores+1)
pValues <- rep(0, length(indices))
#Get results in parallel for next group of sets of changepoints.
while((max(pValues) < alpha) & (min(indices) > 1)){
pValues <- foreach(i=indices, .combine=c, .packages = "changepointSelect") %dopar% {
getPValue(series, changepoints1 = results[[i]], changepoints2 = results[[i - 1]], numTrials = numTrials, serial = T)
}
if(verbose){
for(i in 1:length(indices)){
if(pValues[i] < alpha){
if(pValues[i] == 0){
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value below:", 1/numTrials))
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "significant with empirical p-value:", pValues[i]))
}
}
else{
message(paste("Changepoint set", maxIndex - indices[i], "insignificant with empirical p-value:", pValues[i]))
break
}
}
}
#Decrement the indices associated with the sets of changepoints
indices <- indices - numCores
}
rm(list=ls())
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
library(changepointSelect)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4)
simChangepoints1 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
simChangepoints2 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4)
simChangepoints1
simChangepoints2
library(changepointSelect)
rm(list=ls())
library(changepointSelect)
simChangepoints2 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints1 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
simChangepoints5 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 5)
simChangepoints3 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores=3)
simChangepoints4 <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4)
all(simChangepoints1 == simChangepoints2)
all(simChangepoints2 == simChangepoints3)
all(simChangepoints3 == simChangepoints4)
all(simChangepoints4 == simChangepoints5)
all(simChangepoints1 == simChangepoints5)
simChangepoints5
library(changepointSelect)
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints
simChangepoints <- getChangepoints(series=c(1,2,3,4,5,100,5,4,3,2,1), alpha=0.01, numTrials=10000, serial=F, numCores = 5)
simChangepoints <- getChangepoints(series=c(4,5,100,5,4), alpha=0.01, numTrials=10000, serial=F, numCores = 5)
simChangepoints <- getChangepoints(series=c(4,5,100,5,4), alpha=0.01, numTrials=10000, serial=F, numCores = 5)
simChangepoints <- getChangepoints(series=c(4,5,100,5,4, 4, 4, 5, 100, 4, 4, 4, 5, 100, 4, 5, 4), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints <- getChangepoints(series=c(4,5,100, 100,5,4, 4, 4, 5, 100, 100, 4, 4, 4, 5, 100, 100, 4, 5, 4), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints <- getChangepoints(series=c(rep(4, 20), rep(100, 20)), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints <- getChangepoints(series=c(rep(rep(4, 20), rep(100, 20)), 3), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
rep(rep(4, 20), rep(100, 20)), 3)
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 20), rep(100, 20))), 3), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
c(rep(c(rep(4, 20), rep(100, 20))), 3)
c(rep(c(rep(4, 20), rep(100, 20)), 3))
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 20), rep(100, 20)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=T)
temp <- c(rep(c(rep(4, 50), rep(100, 50)), 3))
temp
cpt.mean(c(rep(c(rep(4, 50), rep(100, 50)), 3)))
cpt.mean(c(rep(c(rep(4, 50), rep(100, 50)), 3)), penalty="CROPS", pen.value=c(0, 10e12), method="PELT", test.stat="Normal", minseglen = 1)
simChangepoints
library(changepointSelect)
temp
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=T)
simChangepoints
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 4)
simChangepoints
library(changepointSelect)
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=F, numCores = 4)
simChangepoints
simChangepoints <- getChangepoints(series=c(rep(c(rep(4, 50), rep(100, 50)), 3)), alpha=0.01, numTrials=10000, serial=T)
simChangepoints
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
simChangepoints
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=T)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 2)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 4)
})
system.time({
simChangepoints <- getChangepoints(series=simSeries, alpha=0.01, numTrials=10000, serial=F, numCores = 3)
})
