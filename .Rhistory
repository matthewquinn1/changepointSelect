}
pdf(paste0("Sim_results_best_fit.pdf"))
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = "Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a 0.01 Level, 10000 Simulations, \n 1.2 Trimming Threshold, and 1.75 Fitting Threshold")
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
#Get results with basic segment correction
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, referenceSegment = 5, verbose=T, plotResults = T)
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, verbose=T, plotResults = T) #Picks largest segment, segment 5
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a", alphaInit, " Level,", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
fittingThreshold = 1.75
#Get the best fit by segment
bestFits <- getBestFitBySegment(series, changepoints, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a", alphaInit, " Level,", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
pdf(paste0("Sim_results_best_fit.pdf"))
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
#Get results with basic segment correction
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, referenceSegment = 5, verbose=T, plotResults = T)
#Get results with basic segment correction
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, referenceSegment = 5, verbose=T, plotResults = T)
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l", ylim=c(-6.5, 6.5),
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepoints, col=rgb(1,0,0,alpha=0.6), lwd=1)
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepoints, col=rgb(1,0,0,alpha=0.6), lwd=1)
#Using CBS changepoints
#Need to put data in CNA format to run CBS
library(DNAcopy)
dat <- CNA(genomdat=simSeries, chrom=rep(1, length(simSeries)),
maploc=1:length(simSeries), data.type=c("logratio"),sampleid=NULL, presorted = TRUE)
results<-segment(dat, p.method="perm", min.width = 2, undo.splits = "prune", undo.prune=0.5, alpha=0.01)
changepointsCBS <- results$output$loc.end[-length(results$output$loc.end)]
#Get the best fit by segment
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
pdf(paste0("Sim_results_best_fit_CBS.pdf"))
#png(paste0("Sim_results_best_fit_CBS.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
#Get results with basic segment correction
correctedSeries <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 5, verbose=T, plotResults = T)
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepoints, col=rgb(1,0,0,alpha=0.6), lwd=1)
#Get results with basic segment correction
correctedSeriesCBS <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 5, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected.pdf"))
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
#Get results with basic segment correction
correctedSeriesCBS <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 5, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected_CBS.pdf"))
#png(paste0("Sim_results_corrected_CBS.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
#png(paste0("Sim_results_corrected_CBS.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
pdf(paste0("Sim_results_corrected.pdf"))
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepoints, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
#Initial changepoints
changepoints <- getChangepoints(series, alpha=alphaInit, numTrials=numTrialsInit, serial=F, numCores = 4)
#Trim changepoints
changepoints <- trimChangepoints(series = series, changepoints=changepoints, thresholdLinear=thresholdLinear, thresholdSeasonal=thresholdSeasonal)
#Get the best fit by segment
bestFits <- getBestFitBySegment(series, changepoints, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
pdf(paste0("Sim_results_best_fit.pdf"))
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
#Get results with basic segment correction
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, referenceSegment = 5, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected.pdf"))
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepoints, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepoints, col=rgb(1,0,0,alpha=0.6), lwd=1)
#Using CBS changepoints
#Need to put data in CNA format to run CBS
library(DNAcopy)
dat <- CNA(genomdat=simSeries, chrom=rep(1, length(simSeries)),
maploc=1:length(simSeries), data.type=c("logratio"),sampleid=NULL, presorted = TRUE)
results<-segment(dat, p.method="perm", min.width = 2, undo.splits = "prune", undo.prune=0.5, alpha=0.01)
changepointsCBS <- results$output$loc.end[-length(results$output$loc.end)]
#Get the best fit by segment
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
pdf(paste0("Sim_results_best_fit_CBS.pdf"))
#png(paste0("Sim_results_best_fit_CBS.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
#png(paste0("Sim_results_best_fit_CBS.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
#Get results with basic segment correction
correctedSeriesCBS <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 5, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected_CBS.pdf"))
#png(paste0("Sim_results_corrected_CBS.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
#png(paste0("Sim_results_corrected_CBS.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
setwd("E:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Diagrams")
#Example of finding the best fit by segment and correcting specific segments.
setwd("E:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Diagrams")
#Initial changepoints
changepoints <- getChangepoints(series, alpha=alphaInit, numTrials=numTrialsInit, serial=F, numCores = 4)
#Trim changepoints
changepoints <- trimChangepoints(series = series, changepoints=changepoints, thresholdLinear=thresholdLinear, thresholdSeasonal=thresholdSeasonal)
#Get the best fit by segment
bestFits <- getBestFitBySegment(series, changepoints, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
pdf(paste0("Sim_results_best_fit.pdf"))
#png(paste0("Sim_results_best_fit.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
#Get results with basic segment correction
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, referenceSegment = 5, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected.pdf"))
#png(paste0("Sim_results_corrected.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepoints, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
#Using CBS changepoints
#Need to put data in CNA format to run CBS
library(DNAcopy)
dat <- CNA(genomdat=simSeries, chrom=rep(1, length(simSeries)),
maploc=1:length(simSeries), data.type=c("logratio"),sampleid=NULL, presorted = TRUE)
results<-segment(dat, p.method="perm", min.width = 2, undo.splits = "prune", undo.prune=0.5, alpha=0.01)
changepointsCBS <- results$output$loc.end[-length(results$output$loc.end)]
#Get the best fit by segment
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
pdf(paste0("Sim_results_best_fit_CBS.pdf"))
#png(paste0("Sim_results_best_fit_CBS.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
#Get results with basic segment correction
correctedSeriesCBS <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 5, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected_CBS.pdf"))
#png(paste0("Sim_results_corrected_CBS.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
changepointsCBS
mean(series[356:600])
#Get the best fit by segment
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
#Get results with basic segment correction
#Reference segment needs to be 6 instead of 5 due to the differing changepoints
correctedSeriesCBS <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 6, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected_CBS.pdf"))
#png(paste0("Sim_results_corrected_CBS.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
changepointsCBS
#Supplemental Plots
fittingThreshold <- 1.25
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
#png(paste0("Sim_results_best_fit_CBS_Supp1.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
#Supplemental Plots
fittingThreshold <- 1.10
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
#Supplemental Plots
fittingThreshold <- 1.50
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
#Supplemental Plots
fittingThreshold <- 1.25
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
pdf(paste0("Sim_results_best_fit_CBS_Supp25.pdf"))
#png(paste0("Sim_results_best_fit_CBS_Supp25.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
correctedSeriesCBS <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 6, verbose=T, plotResults = T)
#png(paste0("Sim_results_corrected_CBS_Supp25.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
pdf(paste0("Sim_results_corrected_CBS_Supp25.pdf"))
#png(paste0("Sim_results_corrected_CBS_Supp25.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
fittingThreshold <- 1.10
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
fittingThreshold <- 1.10
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
pdf(paste0("Sim_results_best_fit_CBS_Supp10.pdf"))
#png(paste0("Sim_results_best_fit_CBS_Supp10.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
correctedSeriesCBS <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 6, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected_CBS_Supp10.pdf"))
#png(paste0("Sim_results_corrected_CBS_Supp10.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
#ASCEPT
#Get the best fit by segment
bestFits <- getBestFitBySegment(series, changepoints, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
fittingThreshold <- 1.50
#ASCEPT
#Get the best fit by segment
bestFits <- getBestFitBySegment(series, changepoints, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
fittingThreshold <- 1.50
#ASCEPT
#Get the best fit by segment
bestFits <- getBestFitBySegment(series, changepoints, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
pdf(paste0("Sim_results_best_fit50.pdf"))
#png(paste0("Sim_results_best_fit50.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, referenceSegment = 5, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected50.pdf"))
#png(paste0("Sim_results_corrected50.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepoints, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
#CBS
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
pdf(paste0("Sim_results_best_fit_CBS_Supp50.pdf"))
#png(paste0("Sim_results_best_fit_CBS_Supp50.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
correctedSeriesCBS <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 6, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected_CBS_Supp50.pdf"))
#png(paste0("Sim_results_corrected_CBS_Supp50.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
fittingThreshold <- 1.25
#ASCEPT
#Get the best fit by segment
bestFits <- getBestFitBySegment(series, changepoints, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
fittingThreshold <- 1.25
#ASCEPT
#Get the best fit by segment
bestFits <- getBestFitBySegment(series, changepoints, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
pdf(paste0("Sim_results_best_fit25.pdf"))
#png(paste0("Sim_results_best_fit25.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepoints)){
abline(v=changepoints[i], col="red")
}
for(i in 1:(length(changepoints)+1)){
points(y=bestFits[[i]][["model"]]$fitted.values,  x=bestFits[[i]][["start"]]:bestFits[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, referenceSegment = 5, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected25.pdf"))
#png(paste0("Sim_results_corrected25.png"), width=800, height=600)
plot(y=correctedSeries, x=1:length(correctedSeries), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using ASCEPT with a ", alphaInit, " Level, ", numTrialsInit, " Simulations, \n", thresholdLinear, " Trimming Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepoints, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
#CBS
bestFitsCBS <- getBestFitBySegment(series, changepointsCBS, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
pdf(paste0("Sim_results_best_fit_CBS_Supp25.pdf"))
#png(paste0("Sim_results_best_fit_CBS_Supp25.png"), width=800, height=600)
plot(y=series, x=1:length(series), xlab="Index", ylab="Value", pch=19,
main = paste0("Best Constant, Linear, or Harmonic Fit by Segment \nusing CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
for(i in 1:length(changepointsCBS)){
abline(v=changepointsCBS[i], col="red")
}
for(i in 1:(length(changepointsCBS)+1)){
points(y=bestFitsCBS[[i]][["model"]]$fitted.values,  x=bestFitsCBS[[i]][["start"]]:bestFitsCBS[[i]][["end"]], col="dodgerblue", type="l", lwd=3)
}
dev.off()
correctedSeriesCBS <- basicSegmentCorrection(series, changepointsCBS, bestFitsBySegment = bestFitsCBS, referenceSegment = 6, verbose=T, plotResults = T)
pdf(paste0("Sim_results_corrected_CBS_Supp25.pdf"))
#png(paste0("Sim_results_corrected_CBS_Supp25.png"), width=800, height=600)
plot(y=correctedSeriesCBS, x=1:length(correctedSeriesCBS), type="l",
xlab = "Index", ylab = paste0("Value"), main = paste0("De-trended or De-seasonalized, Shifted, and Scaled Simulated Data  \nby Segment Using CBS with a ", alphaInit, " Level, ", numTrialsInit, " Permutations, \n", 0.5, " Pruning Threshold, and ", fittingThreshold, " Fitting Threshold"))
abline(v=changepointsCBS, col=rgb(1,0,0,alpha=0.6), lwd=1)
dev.off()
source('E:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Diagrams/Best Fit by Segment and Selective Batch Correction Example.R', echo=TRUE)
source('E:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Diagrams/Best Fit by Segment and Selective Batch Correction Example.R', echo=TRUE)
library(changepointSelect)
#Example of finding the best fit by segment and correcting specific segments.
setwd("E:/Matt Work/Harvard/Mobile Health Project/Changepoint Detection/Diagrams")
library(changepointSelect)
series <- simSeries
#ASCEPT Parameters
alphaInit <- 0.01
numTrialsInit <- 10000
thresholdSeasonal = 1.2
thresholdLinear = 1.2
fittingThreshold = 1.75
#Initial changepoints
changepoints <- getChangepoints(series, alpha=alphaInit, numTrials=numTrialsInit, serial=F, numCores = 4)
#Trim changepoints
changepoints <- trimChangepoints(series = series, changepoints=changepoints, thresholdLinear=thresholdLinear, thresholdSeasonal=thresholdSeasonal)
#Get the best fit by segment
bestFits <- getBestFitBySegment(series, changepoints, thresholdLinear=fittingThreshold, thresholdSeasonal=fittingThreshold, numHarmonics=2, verbose=T, plotFits=T)
#Get results with basic segment correction
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, referenceSegment = 5, verbose=T, plotResults = T)
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits, verbose=T, plotResults = T) #Picks largest segment, segment 5
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits,
segmentsToCorrect = c(1, 2, 3, 4, 6, 7, 8),
referenceSegment = 5, verbose=T, plotResults = T)
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits,
segmentsToCorrect = c(),
referenceSegment = 3, verbose=T, plotResults = T)
#Standardizes
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits,
segmentsToCorrect = c(),
referenceSegment = 0, verbose=T, plotResults = T)
#Following wouldn't be done in practice, just shows flexibility
correctedSeries <- basicSegmentCorrection(series, changepoints, bestFitsBySegment = bestFits,
segmentsToCorrect = c(1,2,3,6,7,8),
referenceSegment = 4, verbose=T, plotResults = T)
